# -*- coding: utf-8 -*-
"""
This module takes care of the status requests that are generated by asynchronous
processes.
"""

import cPickle
from flask import g
from flask import jsonify, make_response
from flask_restful import Resource
from flask_restful_swagger_2 import swagger
from openeo_core.resources.common.response_models import ProcessingResponseModel, SimpleResponseModel,\
    ProcessingResponseListModel

__author__     = "Sören Gebbert"
__copyright__  = "Copyright 2016, Sören Gebbert"
__maintainer__ = "Sören Gebbert"
__email__      = "soerengebbert@googlemail.com"


class ResourceManager(Resource):
    """Management of a single resources
    """

    @swagger.doc({
        'tags': ['resource management'],
        'description': 'Returns the status of a resource.',
        'parameters': [
            {
                'name': 'user_id',
                'description': 'The unique user name/id',
                'required': True,
                'in': 'path',
                'type': 'string'
            },
            {
                'name': 'resource_id',
                'description': 'The id of the resource',
                'required': True,
                'in': 'path',
                'type': 'string'
            }
        ],
        'responses': {
            '200': {
                'description': 'The current state of the resource',
                'schema':ProcessingResponseModel
            },
            '400': {
                'description': 'The error message if the resource does not exists',
                'schema':SimpleResponseModel
            }
        }
     })
    def get(self, user_id, resource_id):
        return make_response(jsonify("Resource"), 200)


    @swagger.doc({
        'tags': ['resource management'],
        'description': 'Request the termination of the resource.',
        'parameters': [
            {
                'name': 'user_id',
                'description': 'The unique user name/id',
                'required': True,
                'in': 'path',
                'type': 'string'
            },
            {
                'name': 'resource_id',
                'description': 'The id of the resource',
                'required': True,
                'in': 'path',
                'type': 'string'
            }
        ],
        'responses': {
            '200': {
                'description': 'Returned if termination request of the resource was successfully committed. '
                               'Be aware that this does not mean, that the resource was successfully terminated.',
                'schema':SimpleResponseModel
            },
            '400': {
                'description': 'The error message why resource storage information gathering did not succeeded',
                'schema':SimpleResponseModel
            }
        }
     })
    def delete(self, user_id, resource_id):
        return make_response(jsonify("Resource termination request"), 200)

    @swagger.doc({
        'tags': ['resource management'],
        'description': 'Create a new resource entry.',
        'parameters': [
            {
                'name': 'user_id',
                'description': 'The unique user name/id',
                'required': True,
                'in': 'path',
                'type': 'string'
            },
            {
                'name': 'resource_id',
                'description': 'The id of the resource',
                'required': True,
                'in': 'path',
                'type': 'string'
            },
            {
                'name': 'resource',
                'description': 'The description of the resource that should the created',
                'required': True,
                'in': 'body',
                'schema': ProcessingResponseModel
            }
        ],
        'responses': {
            '200': {
                'description': 'Returned True if resource creation was successful.',
                'schema':SimpleResponseModel
            },
            '400': {
                'description': 'The error message why resource creation did not succeeded',
                'schema':SimpleResponseModel
            }
        }
     })
    def post(self, user_id, resource_id):
        return make_response(jsonify("Resoure created"), 200)

    @swagger.doc({
        'tags': ['resource management'],
        'description': 'Update an existing resource.',
        'parameters': [
            {
                'name': 'user_id',
                'description': 'The unique user name/id',
                'required': True,
                'in': 'path',
                'type': 'string'
            },
            {
                'name': 'resource_id',
                'description': 'The id of the resource',
                'required': True,
                'in': 'path',
                'type': 'string'
            },
            {
                'name': 'resource',
                'description': 'The description of the resource that should the updated',
                'required': True,
                'in': 'body',
                'schema': ProcessingResponseModel
            }
        ],
        'responses': {
            '200': {
                'description': 'Returned True if resource was successfully updated.',
                'schema':SimpleResponseModel
            },
            '400': {
                'description': 'The error message why resource update did not succeeded',
                'schema':SimpleResponseModel
            }
        }
     })
    def put(self, user_id, resource_id):
        return make_response(jsonify("Resoure created"), 200)


class ResourcesManager(Resource):
    """Management of multiple resources
    """

    @swagger.doc({
        'tags': ['resource management'],
        'description': 'Get a list of resources that have been generated by the specified user',
        'parameters': [
            {
                'name': 'user_id',
                'description': 'The unique user name/id',
                'required': True,
                'in': 'path',
                'type': 'string'
            }
        ],
        'responses': {
            '200': {
                'description': 'Returned a list of resources that have been generated by the specified user.',
                'schema':ProcessingResponseListModel
            },
            '401': {
                'description': 'The error message why resource gathering did not succeeded',
                'schema':SimpleResponseModel
            }
        }
     })
    def get(self, user_id):
        return make_response(jsonify("Resources"), 200)

    @swagger.doc({
        'tags': ['resource management'],
        'description': 'Terminate all accepted and running resources of the specified user.',
        'parameters': [
            {
                'name': 'user_id',
                'description': 'The unique user name/id',
                'required': True,
                'in': 'path',
                'type': 'string'
            }
        ],
        'responses': {
            '200': {
                'description': 'Termination requests have been successfully committed. Be aware that does '
                               'not mean, that the resources have been successfully terminated.',
                'schema':SimpleResponseModel
            },
            '401': {
                'description': 'The error message why the resource termination did not succeeded',
                'schema':SimpleResponseModel
            }
        }
     })
    def delete(self, user_id):
        return make_response(jsonify("Resources"), 200)
